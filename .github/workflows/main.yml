name: CI/CD com SonarCloud

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build-and-analyze:
    name: Build and Analyze
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      cobertura_aprovada: ${{ steps.check-coverage.outputs.coverage_ok }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar o Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Rodar análise no SonarCloud com testes e cobertura
        run: mvn clean verify sonar:sonar
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          -Dsonar.coverage.exclusions=**/config/**,**/model/**,**/dto/**,**/exception/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Baixar relatório do SonarCloud
        id: download-report
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=${{ secrets.SONAR_PROJECT_KEY }}&metricKeys=coverage" \
            -o sonar-report.json

      - name: Verificar cobertura mínima
        id: check-coverage
        run: |
          COVERAGE=$(jq -r '.component.measures[0].value' sonar-report.json)
          echo "Cobertura atual: $COVERAGE%"
          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "coverage_ok=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_ok=false" >> $GITHUB_OUTPUT
          fi

  deploy-if-quality-ok:
    name: Deploy para Heroku (se qualidade e cobertura ok)
    needs: build-and-analyze
    if: needs.build-and-analyze.outputs.cobertura_aprovada == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Instalar Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
          export PATH="$PATH:/usr/local/bin"

      - name: Deploy para o Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
